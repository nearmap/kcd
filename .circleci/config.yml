version: 2

defaults: &defaults
  machine: true
  working_directory: ~/go/src/github.com/nearmap/cvmanager

remove-env-tag: &remove-env-tag
  name: Remove deploy tag from current deployments
  command: |
    source env_file
    docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
      nearmap/cvmanager ecr-tags remove --ecr ${ECR_ENDPOINT}/nearmap/cvmanager --tags $ENV

add-env-tag: &add-env-tag
  name: Add deployment tag for env to this version
  command: |
    source env_file
    docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
      nearmap/cvmanager ecr-tags add --ecr ${ECR_ENDPOINT}/nearmap/cvmanager --tags $ENV --version ${CIRCLE_SHA1}


jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build cvmanager container image
          command: |
            `aws ecr get-login --no-include-email --region ap-southeast-2`
            docker build -t nearmap/cvmanager .
      - run:
          name: Run unit and integration tests
          command: |
            docker-compose down
            docker-compose rm -f
            docker-compose up --force-recreate --build --abort-on-container-exit
      - run:
          name: Go Report Card
          command: |
              curl -X POST -F 'repo=github.com/nearmap/cvmanager'  https://goreportcard.au-api.nearmap.com/checks
              echo "Report is avaialble @ https://goreportcard.au-api.nearmap.com/report/github.com/nearmap/cvmanager"
      - deploy:
          name: Push application docker image
          command: |
              echo "Tagging container image with sha: ${CIRCLE_SHA1}"
              docker tag nearmap/cvmanager ${ECR_ENDPOINT}/nearmap/cvmanager:${CIRCLE_SHA1}
              docker push ${ECR_ENDPOINT}/nearmap/cvmanager:${CIRCLE_SHA1}

  dev-deploy:
    <<: *defaults
    steps:
      - run:
          name: Set env tag
          command: |
            echo "export ENV=dev" >> env_file
      - run:
          <<: *remove-env-tag
      - run:
          <<: *add-env-tag

  qa-deploy:
    <<: *defaults
    steps:
      - run:
          name: Set env tag
          command: |
            echo "export ENV=qa" >> env_file
      - run:
          <<: *remove-env-tag
      - run:
          <<: *add-env-tag

  prod-deploy:
    <<: *defaults
    steps:
      - run:
          name: Set env tag
          command: |
            echo "export ENV=prod,latest" >> env_file
      - run:
          <<: *remove-env-tag
      - run:
          <<: *add-env-tag

  push-to-dockerio:
    <<: *defaults
    steps:
      - run:
          name: Push image to dockerio
          command: |
            `aws ecr get-login --no-include-email --region ap-southeast-2`
            docker pull ${ECR_ENDPOINT}/nearmap/cvmanager:${CIRCLE_SHA1}
            docker tag ${ECR_ENDPOINT}/nearmap/cvmanager:${CIRCLE_SHA1} nearmap/cvmanager:latest

            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker tag nearmap/cvmanager:latest nearmap/cvmanager:${CIRCLE_SHA1}
            docker push nearmap/cvmanager:${CIRCLE_SHA1}

  regression-check-qa: &regression-check
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Regression check
          command: |
            echo "checking for regression with head of master"
            MASTER_SHA=`git rev-parse master`
            regression_diff=`git rev-list --left-right --count  $MASTER_SHA...$CIRCLE_SHA1 | awk '{print $1}'`
            if [[ "$regression_diff" -gt "0" ]]; then
              msg="Regresion found in ${CIRCLE_PR_USERNAME}'s PR # ${CIRCLE_PR_NUMBER} ie ${CIRCLE_PULL_REQUESTS}' .\nCurrently deployed version $MASTER_SHA has changes thats missing in target version $CIRCLE_SHA1"
              echo $msg
              curl -X POST -H 'Content-type: application/json' --data '{"text":"'$msg'"}' ${SLACK_API_CHANNEL}
            else
              echo "All good! No regression found .. "
            fi

  regression-check-master:
    <<: *regression-check

  regression-check-prod:
    <<: *regression-check

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - regression-check-master:
          filters:
            branches:
              only: master
      - dev-deploy-hold:
          type: approval
          requires:
            - build
      - dev-deploy:
          requires:
            - dev-deploy-hold
      - qa-deploy-hold:
          type: approval
          requires:
            - build
      - regression-check-qa:
          requires:
            - qa-deploy-hold
      - qa-deploy:
          requires:
            - regression-check-qa
      - regression-check-prod:
          filters:
            branches:
              only: master
          requires:
            - build
      - prod-deploy:
          filters:
            branches:
              only: master
          requires:
            - regression-check-prod
      - push-to-dockerio:
          filters:
            branches:
              only: master
          requires:
            - prod-deploy
