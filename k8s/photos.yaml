kind: "Template"
apiVersion: "v1"
metadata:
  name: "photo-template"
  annotations:
    description: "Template for photos service"
labels:
  template: "photo-template"
objects:
  - kind: Namespace
    apiVersion: v1
    metadata:
      name: photos
  - kind: Service
    apiVersion: v1
    metadata:
      name: photos-svc
      namespace: photos
      labels:
        component: photos-svc
    spec:
      type: NodePort
      ports:
      - port: 80
        targetPort: 2021
      selector:
        component: photosapp
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: photosapp
      namespace: photos
      labels:
        app: photos
    spec:
      replicas: 2
      revisionHistoryLimit: 15
      selector:
        matchLabels:
          app: photos
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 0
      minReadySeconds: 30
      template:
        metadata:
          labels:
            app: photos
            component: photosapp
            cvapp: photoscv
        spec:
          nodeSelector:
            nodeType: primary
          containers:
            - name: photosapp-container
              image: 973383851042.dkr.ecr.ap-southeast-2.amazonaws.com/nearmap/sourcephotos:$(VERSION)
              resources:
                limits:
                  cpu: $(SVC_CPU_LIMIT)
                  memory: $(SVC_MEMORY_LIMIT)
                requests:
                  cpu: $(SVC_CPU_REQUESTS)
                  memory: $(SVC_MEMORY_REQUESTS)
              livenessProbe:
                httpGet:
                  path: /alive
                  port: 2021
                initialDelaySeconds: 120
                timeoutSeconds: 1
              readinessProbe:
                httpGet:
                  path: /alive
                  port: 2021
              ports:
                - containerPort: 2021
              args:
                - "run"
                - "--cluster=$(ENV)"
                - "--surveys-dburl=$(DB_URL)"
                - "--cache-url=$(CACHE_URL)"
                - "--identity-url=https://$(IDENTITY_SERVER).nearmap.com/api/identityserver"
                - "--identity-secret=YXBpS2V5Q2xpZW50OkZvbGtzeS1MaW5lbi1TaHJvdWQtRWRnZWQ="
                - "--business-systems-url=https://$(IDENTITY_SERVER).nearmap.com"
                - "--usage-stream-prefix=$(USAGE_STREAM_PREFIX)"
                - "--log-http-requests"
                - "--use-fluentd-log"
              env:
              - name: AWS_REGION
                valueFrom:
                  configMapKeyRef:
                    name: photos
                    key: region
              - name: INSTANCENAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: STATS_HOST
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              livenessProbe:
                httpGet:
                  path: /alive
                  port: 2021
                initialDelaySeconds: 3
                periodSeconds: 3
              readinessProbe:
                httpGet:
                  path: /alive
                  port: 2021
                initialDelaySeconds: 3
                periodSeconds: 3
  - kind: HorizontalPodAutoscaler
    apiVersion: autoscaling/v2beta1
    metadata:
      name: photosscale
      namespace: photos
    spec:
      scaleTargetRef:
        # ## https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
        apiVersion: apps/v1
        kind: Deployment
        name: photosapp
      minReplicas: 2
      maxReplicas: 10
      ## https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
      metrics:
        - type: Resource
          resource:
            name: cpu
            targetAverageUtilization: 70
  - kind: Ingress
    apiVersion: extensions/v1beta1
    metadata:
      name: photos-ingress
      namespace: photos
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/subnets: "$(SUBNETS)"
        alb.ingress.kubernetes.io/security-groups: "$(SECURITY_GROUP)"
        kubernetes.io/ingress.class: "alb"
        alb.ingress.kubernetes.io/certificate-arn: "$(SSL_CERTIFICATE)"
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "2"
        alb.ingress.kubernetes.io/healthcheck-path: /alive
      labels:
        app: photos-ingress
    spec:
      rules:
      - host: photos.$(ENV).$(BASE_NAME)
        http:
          paths:
          - path: /
            backend:
              serviceName: photos-svc
              servicePort: 80
  - kind: ConfigMap
    apiVersion: v1
    data:
      region: "$(REGION)"
      # This version will be used for sp jobs that are spun by SP service
      version: $(VERSION)
    metadata:
      name: photos
      namespace: photos
  - kind: ContainerVersion
    apiVersion: custom.k8s.io/v1
    metadata:
      name: photos-cv
      namespace: photos
    spec:
      imageRepo: 973383851042.dkr.ecr.ap-southeast-2.amazonaws.com/nearmap/sourcephotos
      tag: env-$(ENV)
      checkFrequency: 5
      selector:
        cvapp: photoscv
      container: photosapp-container
      config:
        name: photos
        key: version
parameters:
  - name: "REGION"
    description: "AWS region name"
    required: true
    parameterType: "string"
  - name: "DB_URL"
    description: "Survey DB url"
    required: true
    parameterType: "string"
  - name: "PREVIEW_BUCKET"
    description: "preview bucket url"
    required: true
    parameterType: "string"
  - name: "WEBTILE_BUCKET"
    description: "hypertiles bucket url"
    required: true
    parameterType: "string"
  - name: "SURVEY_METADATA_ID"
    description: "Survey metadata id"
    required: true
    parameterType: "string"
  - name: "ENV"
    description: "Name of the cluster"
    required: true
    parameterType: "string"
  - name: "BASE_NAME"
    description: "Name of the cluster"
    value: "nearmapdev.com"
    required: true
    parameterType: "string"
  - name: "CACHE_URL"
    description: "Redis cahce url"
    required: true
    parameterType: "string"
  - name: "SUBNETS"
    description: "comma seperated list of subnets"
    required: true
    parameterType: "string"
  - name: "SECURITY_GROUP"
    description: "comma seperated list of security group id"
    required: true
    parameterType: "string"
  - name: "SSL_CERTIFICATE"
    description: "SSL certificate-arn"
    required: true
    parameterType: "string"
  - name: "IDENTITY_SERVER"
    description: "SSL certificate-arn"
    value: "connect-qa"
    required: true
    parameterType: "string"
  - name: "USAGE_STREAM_PREFIX"
    description: "kinesis stream name prefix for usage"
    required: true
  - name: "SVC_CPU_LIMIT"
    description: "CPU limit for photo pod"
    value: "6.5"
    required: false
    parameterType: "string"
  - name: "SVC_MEMORY_LIMIT"
    description: "Memory Limit for photo pod"
    value: "16Gi"
    required: false
    parameterType: "string"
  - name: "SVC_CPU_REQUESTS"
    description: "CPU requests for photo pod"
    value: "5.5"
    required: false
    parameterType: "string"
  - name: "SVC_MEMORY_REQUESTS"
    description: "Memory requests for photo pod"
    value: "8Gi"
    required: false
    parameterType: "string"
  - name: "VERSION"
    description: "Version of the photo service"
    required: true
    parameterType: "string"
